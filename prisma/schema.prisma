generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model author {
  id                    String                       @id @default(uuid())
  name                  String                       @unique
  article_metadata_list article_metadata_to_author[]
}

model link {
  id                    String                     @id @default(uuid())
  title                 String?
  href                  String                     @unique
  rel                   String?
  type                  String?
  created_at            DateTime                   @default(now())
  article_metadata_list article_metadata_to_link[]
}

model category {
  id                    String                         @id @default(uuid())
  short_name            String                         @unique
  full_name             String
  group_name            String
  article_metadata_list article_metadata_to_category[]
}

model article_metadata {
  id                String                         @id @default(uuid())
  updated           DateTime
  published         DateTime
  title             String
  comment           String?
  created_at        DateTime                       @default(now())
  external_id       String                         @unique
  generated_summary String?
  slug              String                         @default("")
  abstract          String
  updated_at        DateTime                       @default(now()) @updatedAt
  authors           article_metadata_to_author[]
  categories        article_metadata_to_category[]
  links             article_metadata_to_link[]

  @@index([slug])
  @@index([updated])
}

model article_metadata_to_author {
  id                  String           @id @default(uuid())
  article_metadata_id String
  author_id           String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  author              author           @relation(fields: [author_id], references: [id])
}

model article_metadata_to_category {
  id                  String           @id @default(uuid())
  article_metadata_id String
  category_id         String
  primary             Boolean
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  category            category         @relation(fields: [category_id], references: [id])
}

model article_metadata_to_link {
  id                  String           @id @default(uuid())
  article_metadata_id String
  link_id             String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  link                link             @relation(fields: [link_id], references: [id])
}

model email_subscription {
  id         String     @id @default(uuid())
  email      String
  email_list email_list
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  @@unique([email, email_list])
  @@index([email, email_list])
}

enum email_list {
  WEEKLY_SUMMARY
}
