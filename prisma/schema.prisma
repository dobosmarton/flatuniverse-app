generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model author {
  id                    String                       @id @default(uuid())
  name                  String                       @unique
  article_metadata_list article_metadata_to_author[]

  @@index([name])
}

model link {
  id                    String                     @id @default(uuid())
  title                 String?
  href                  String                     @unique
  rel                   String?
  type                  String?
  created_at            DateTime                   @default(now())
  article_metadata_list article_metadata_to_link[]

  @@index([href])
}

model category {
  id                    String                         @id @default(uuid())
  short_name            String                         @unique
  full_name             String
  group_name            String
  article_metadata_list article_metadata_to_category[]

  @@index([group_name, short_name])
}

model article_metadata {
  id                              String                            @id @default(uuid())
  updated                         DateTime
  published                       DateTime
  title                           String
  comment                         String?
  created_at                      DateTime                          @default(now())
  external_id                     String                            @unique
  generated_summary               String?
  slug                            String                            @default("")
  abstract                        String
  updated_at                      DateTime                          @default(now()) @updatedAt
  authors                         article_metadata_to_author[]
  categories                      article_metadata_to_category[]
  links                           article_metadata_to_link[]
  chat_thread_to_article_metadata chat_thread_to_article_metadata[]

  @@index([slug])
  @@index([updated])
  @@index([published])
  @@index([title, abstract, published, external_id])
}

model article_metadata_to_author {
  id                  String           @id @default(uuid())
  article_metadata_id String
  author_id           String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  author              author           @relation(fields: [author_id], references: [id])

  @@index([article_metadata_id, author_id])
}

model article_metadata_to_category {
  id                  String           @id @default(uuid())
  article_metadata_id String
  category_id         String
  primary             Boolean
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  category            category         @relation(fields: [category_id], references: [id])

  @@index([article_metadata_id, category_id])
}

model article_metadata_to_link {
  id                  String           @id @default(uuid())
  article_metadata_id String
  link_id             String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  link                link             @relation(fields: [link_id], references: [id])

  @@index([article_metadata_id, link_id])
}

model email_subscription {
  id         String     @id @default(uuid())
  email      String
  email_list email_list
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  @@unique([email, email_list])
  @@index([email, email_list])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sequin_events {
  id                  Int      @id @default(autoincrement())
  seq                 BigInt
  source_database_id  String
  source_table_oid    BigInt
  source_table_schema String
  source_table_name   String
  record_pk           String
  record              Json
  changes             Json?
  action              String
  committed_at        DateTime
  inserted_at         DateTime

  @@unique([source_database_id, committed_at, seq, record_pk], map: "sequin_events_source_database_id_committed_at_seq_record_pk_idx")
  @@index([committed_at])
  @@index([seq])
  @@index([source_table_oid])
}

model chat_thread_to_article_metadata {
  id                  String           @id @default(uuid())
  chat_thread_id      String
  article_metadata_id String
  article_metadata    article_metadata @relation(fields: [article_metadata_id], references: [id])
  chat_thread         chat_thread      @relation(fields: [chat_thread_id], references: [id])

  @@index([chat_thread_id, article_metadata_id])
}

model chat_thread {
  id                 String                            @id @default(uuid())
  user_id            String?
  slug               String                            @unique
  title              String?
  created_at         DateTime                          @default(now())
  updated_at         DateTime                          @default(now()) @updatedAt
  chat_message       chat_message[]
  suggested_articles chat_thread_to_article_metadata[]

  @@index([slug])
  @@index([created_at])
}

model chat_message {
  id             String            @id @default(uuid())
  role           chat_message_role
  content        String
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now()) @updatedAt
  chat_thread_id String
  chat_thread    chat_thread       @relation(fields: [chat_thread_id], references: [id])

  @@index([chat_thread_id])
  @@index([created_at])
}

enum chat_message_role {
  USER
  ASSISTANT
}

enum email_list {
  WEEKLY_SUMMARY
}
